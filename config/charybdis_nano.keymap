#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    // macros
    macros {
      ZMK_MACRO(nxt_tab,
        wait-ms = <0>;
        tap-ms  = <10>;
        bindings = <&kp LC(TAB)>;
      )

      ZMK_MACRO(prv_tab,
        wait-ms = <0>;
        tap-ms  = <10>;
        bindings = <&kp LC(LS(TAB))>;
      )

      ZMK_MACRO(double_shift,
        wait-ms = <0>;
        tap-ms  = <10>;
        bindings = <&kp LSHIFT &kp LSHIFT>;
      )

      ZMK_MACRO(amos,
        wait-ms = <0>;
        tap-ms = <10>;
        bindings = <&kp LS(A) &kp M &kp O &kp S>
        , <&kp N6 &kp N9 &kp N8>;
      )
    };
    
    // custom shift using mod-morph 
    behaviors {
      cmqus: comma_question {
        compatible = "zmk,behavior-mod-morph";
        label = "COMMA_QUESTION";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp QUESTION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      dtsmi: dot_semi {
        compatible = "zmk,behavior-mod-morph";
        label = "DOT_SEMI";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
    };

    // combos
    combos {
        compatible = "zmk,combos";
        // right hand 
        combo_resc {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp ESC>;
        };

        combo_rdelete {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DELETE>;
        };
 
        // left hand
        combo_lesc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp ESC>;
        };

        combo_dblshft {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&double_shift>;
        };

        combo_pgdn {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp PG_DN>;
        };
 
        combo_pgup {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp PG_UP>;
        };

        combo_ldelete {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp DELETE>;
        };

        // symbols
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp UNDERSCORE>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp MINUS>;
        };

        // toggles
        combo_lsym {
            timeout-ms = <50>;
            key-positions = <31 33>;
            bindings = <&tog SYM>;
        };

        combo_lnum {
            timeout-ms = <50>;
            key-positions = <31 34>;
            bindings = <&tog NUM>;
        };

        combo_capsword {
            timeout-ms = <50>;
            key-positions = <2 7>;
            bindings = <&caps_word>;
        };

        combo_lclk {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&mkp LCLK>;
        };

        combo_rclk {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&mkp RCLK>;
        };

        // output selection
        combo_outble {
            timeout-ms = <50>;
            key-positions = <9 29>;
            bindings = <&out OUT_BLE>;
        };

        combo_outtog {
            timeout-ms = <50>;
            key-positions = <8 28>;
            bindings = <&out OUT_TOG>;
        };

        // ble selection
        combo_ble1 {
            timeout-ms = <50>;
            key-positions = <4 24>;
            bindings = <&bt BT_SEL 0>;
        };

        combo_ble2 {
            timeout-ms = <50>;
            key-positions = <3 23>;
            bindings = <&bt BT_SEL 1>;
        };

        combo_ble3 {
            timeout-ms = <50>;
            key-positions = <2 22>;
            bindings = <&bt BT_SEL 2>;
        };

        combo_ble4 {
            timeout-ms = <50>;
            key-positions = <1 21>;
            bindings = <&bt BT_SEL 3>;
        };

        combo_ble5 {
            timeout-ms = <50>;
            key-positions = <0 20>;
            bindings = <&bt BT_SEL 4>;
        };

        combo_left_reset {
            timeout-ms = <50>;
            key-positions = <2 3 4>;
            bindings = <&sys_reset>;
        };

        combo_right_reset {
            timeout-ms = <50>;
            key-positions = <5 6 7>;
            bindings = <&sys_reset>;
        };

        combo_left_bootloader {
            timeout-ms = <50>;
            key-positions = <1 2 3 4>;
            bindings = <&bootloader>;
        };
        
        combo_right_bootloader {
            timeout-ms = <50>;
            key-positions = <5 6 7 8>;
            bindings = <&bootloader>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
            	&kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P
             	&mt LGUI A      &mt LALT S      &mt LSFT D      &mt LCTL F      &lt NUM G       &lt NUM H       &mt RCTL J      &mt RSFT K      &mt RALT L      &mt RGUI SQT 
                &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &cmqus          &dtsmi          &kp CAPS
                                                &lt MOUSE ESC   &lt FUN TAB     &lt SYM SPACE   &lt SYM RET     &lt FUN BSPC
             	>;
        };

        number_layer {
            label = "NUM";
            bindings = <
                &none           &none           &none           &none           &none           &kp KP_PLUS     &kp N7          &kp N8          &kp N9          &kp KP_MINUS
                &kp LGUI        &kp LALT        &kp LSFT        &kp LCTL        &none           &kp KP_MULTIPLY &kp N4          &kp N5          &kp N6          &kp KP_DIVIDE
                &none           &none           &none           &none           &none           &kp KP_EQUAL    &kp N1          &kp N2          &kp N3          &kp KP_DOT
                                                &none           &none           &kp BSPC        &kp RET         &kp N0
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
                &none           &none           &kp LT          &kp GT          &kp PRCNT       &kp AMPS        &kp CARET       &kp LBRC        &kp RBRC        &none
                &kp GRAVE       &kp EXCL        &kp MINUS       &kp PLUS        &kp EQUAL       &kp PIPE        &kp COLON       &kp LPAR        &kp RPAR        &kp AT
                &none           &none           &kp SLASH       &kp STAR        &kp BSLH        &kp HASH        &kp DLLR        &kp LBKT        &kp RBKT        &none  
                                                &none           &none           &none           &none           &none
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
                &kp F1           &kp F2         &kp F3          &kp F4          &none           &none           &none           &bt BT_PRV      &bt BT_NXT      &bt BT_CLR 
                &kp F5           &kp F6         &kp F7          &kp F8          &none           &kp LEFT        &mt RCTL DOWN   &mt RSFT UP     &mt RALT RIGHT  &kp RGUI
                &kp F9           &kp F10        &kp F11         &kp F12         &none           &none           &none           &none           &none           &none
                                                &none           &none           &none           &none           &none
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                &trans           &mkp LCLK        &mkp MCLK        &mkp RCLK         &trans          &trans          &kp RCTL        &kp RSFT        &kp RALT        &kp RGUI
                &trans           &trans           &trans           &lt SCROLL ESC    &lt SNIPE ESC   &trans          &trans          &trans          &trans          &mkp LCLK
                                                  &trans           &trans            &trans          &trans          &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                                                  &trans           &trans            &trans          &trans          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                &trans           &trans           &trans           &trans            &trans          &trans          &trans          &trans          &trans          &trans
                                                  &trans           &trans            &trans          &trans          &trans
            >;
        };
    };
};
